Global:
- C++ could have been better for the use of OOP but I'm not confidente about my C++.
    : OOP not necessary, the way it is currently implemented is good.
- Java might have been easier has the memory addressing is mainly managed automatically.
    : C Is optimal as way closer to hardware and has less compiler optmization.
- <pthread.h>: learn more about this, (schreduler?, waking up?), how thread also works in C. Write about this. (1 page max)
    : WRITE ABOUT this.
- All CPU are being used. Probably some libraries used are multitreaded ? is itjust the switch between CPU making it undistinguisable ?
    : It is not the case, it it because many threads are created even when using one so it is not visible on the graph because it is too fast.

Database:
- A dynamic array seems far from suitable as removing an element (aka row) requires to re-address every row at the top of it. While taking a given size array is not scalable.
    : It is fine for now to define a limited size array and work with that.
- Single row's field modification currently not possible. A function is needed for each field.
    : It's ok.
- Should I aim to store the data to make it consistente?
    : No, only in RAM is good.
- String seems for now to be an issue. (modifying only the pointer while assigning more memory might be a solution).
    : Can be done later, for now work with what represent the problem.
- What if two threads modify two fields of the datbase, can the row be mixed of both or not ?
    : Considere both case later, for not just use COMPARE_EXCHANGE AS A LOCK.
- Looking for a solution to make "update_row" in isolation. Would like two mode, mix and atomic.
    : Updating one field at a time for now and multiple later.

Tests:
- I forgot that barrieres aren't implemented in C which made things slightly harder.
    : It's fine, not hard to implement + copy past.
- It is essential to be sure we work on a good base.
    : WORK IN PROGRESS, not the best part of the project so slowly doing it.

Benchmark:
- I planned to take as a basis the tests written by Peter Sestoft.
    : It will not necessarily be obligated to use it as we don't use java but at least run multiple times.  (At 10 time, see reference paper again for more information)
- One metric is ready to be used is the number of try before a compare and swap succeed.
    : It might slightly impact performance, should be ok. Do not concidere doing it with locks. Would requires to code a schreduler.
- Writting the expected outcome of running the tests.
    : Scientific way: Hypotesis, tests and comparaison, results.
- C clock_t is only on microsecond (not preceise enough)
    : Had some research and found timespec and clock_gettime() (for linux system only, it is the most accurate). Try to understand and implement a timer based on this.
- Cache differences
- Calculate how mush times it take to modify one row when multiple threads try to modify it.
    : WORK IN PROGRESS, adapting the mark7 function is a good idea to benchmark this.
- Number of retries increases EXPONENTIAL!!! At least it seems to. Tried to check if it was possible and barely seem to /:
    : Some settings might have made it overflow by it was simply an addressing mistake in the end.
- More Benchmark: -Response time (time it takes to execute a query when the system is being used)
                  -Time to perform other actions on the database.
                  -Compare against locks ?
                  -How it performs under server settings,
- Check with same threads instead of recreating them.
- It will be longer as many threads are trying in the same time then many retire
   same for the reries.

- Try compare lock vs atomic.
- writte more about the tests and results;
- Timer reajustement ?

- Peter Sestoft benchmark function translated and adapted for multitreaded benchmark.
    :important
- lock assembly instruction. investiguation
    :Write and document about the fetch_and_add. (assembly part too). 
- Other simple database operations to benchmark?
    :Swapping an item from 2 tables for example. And compare with using locks too.
- Looking back to the cache mapping for even more accurate benchmark.
    :knowing about memory being staying in the cache or ram as it can impact the benchmark. search if atomic in C result in volatile variable.
- I learned about a machine available at ITU that could have 128+cores, booking a slot to run the tests on ?
    :learning it + specialized into specific image processing for instance, might not be relevant.
- Trying to understand an opensource database to improve it with CAS ? 
    :Tooooo long, an entiere project for this.
- Time remaining:
    :Progress on the report consistently. Think about explaining to Peter as he might not know.
- Report:
    Not too overexplaining.
